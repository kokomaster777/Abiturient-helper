# -*- coding: utf-8 -*-
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging
from contextlib import closing
import requests
import asyncio
import os
import re

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CONFIG = {
    "response_delay": float(os.getenv('RESPONSE_DELAY', 0.3)),  # –º–∏–Ω—É—Ç—ã
    "cleanup_interval": int(os.getenv('CLEANUP_INTERVAL', 24)),  # —á–∞—Å—ã
    "max_questions_per_user": int(os.getenv('MAX_QUESTIONS_PER_USER', 50)),  # –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
    "allowed_chat_id": int(os.getenv('ALLOWED_CHAT_ID')),  # ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞
    "allowed_topic_id": int(os.getenv('ALLOWED_TOPIC_ID', 2))  # ID —Ç–µ–º—ã, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç
}

# API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
IAM_TOKEN = os.getenv('IAM_TOKEN')
FOLDER_ID = os.getenv('FOLDER_ID')
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    if os.path.exists('questions.db'):
        os.remove('questions.db')
    
    with closing(sqlite3.connect('questions.db')) as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE questions
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     msg_id INTEGER,
                     chat_id INTEGER,
                     user_id INTEGER,
                     question TEXT,
                     timestamp DATETIME,
                     answered BOOLEAN DEFAULT FALSE,
                     topic_id INTEGER,
                     admin_replied BOOLEAN DEFAULT FALSE)''')  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
        c.execute('''CREATE TABLE users
                    (user_id INTEGER PRIMARY KEY,
                     last_question_time DATETIME,
                     question_count INTEGER DEFAULT 0)''')
        conn.commit()
        logger.info("Database initialized")

init_db()


def load_system_prompt() -> str:
    try:
        with open("system_prompt.txt", "r", encoding="utf-8") as f:
            return f.read()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è system_prompt.txt: {e}")
        return "–¢—ã ‚Äî –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –£—Ä–§–£."
    
def get_answer(question: str) -> str:
    try:
        system_prompt = load_system_prompt()

        prompt = {
            "modelUri": f"gpt://{FOLDER_ID}/yandexgpt",
            "completionOptions": {
                "temperature": 0.3,
                "maxTokens": 1000
            },
            "messages": [
                {
                    "role": "system",
                    "text": system_prompt
                },
                {
                    "role": "user",
                    "text": question
                }
            ]
        }

        response = requests.post(
            "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
            headers={
                "Authorization": f"Bearer {IAM_TOKEN}",
                "Content-Type": "application/json"
            },
            json=prompt
        ).json()

        return response['result']['alternatives'][0]['message']['text']
    except Exception as e:
        logger.error(f"Yandex API error: {str(e)}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def get_feedback_keyboard(message_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üëç", callback_data=f"like:{message_id}"),
        InlineKeyboardButton("üëé", callback_data=f"dislike:{message_id}")
    )
    return keyboard


def save_feedback_to_file(message_id: int, feedback: str, user_id: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ message_id
        result = db_execute("SELECT question FROM questions WHERE msg_id=?", (message_id,))
        question_text = result[0][0] if result else "[–≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω]"

        with open("feedback_log.txt", "a", encoding="utf-8") as f:
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –í–æ–ø—Ä–æ—Å: \"{question_text}\" | –û—Ü–µ–Ω–∫–∞: {feedback} | –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n")

        logger.info(f"–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {'–ª–∞–π–∫' if feedback == 'üëç' else '–¥–∏–∑–ª–∞–π–∫'} –Ω–∞ –≤–æ–ø—Ä–æ—Å {message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ü–µ–Ω–∫–∏ –≤ —Ñ–∞–π–ª: {e}")

#–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ —Ñ–∞–π–ª questions_log.txt
def save_question_to_file(question: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        with open('questions_log.txt', 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {question}\n")
    except Exception as e:
        logger.error(f"Failed to save question to file: {e}")


async def send_delayed_response(chat_id: int, message_id: int, topic_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
        result = db_execute(
            "SELECT admin_replied FROM questions WHERE msg_id=?",
            (message_id,)
        )
        
        if result and result[0][0]:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª
            logger.info(f"Admin already replied to message {message_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã
        question = db_execute(
            "SELECT question FROM questions WHERE msg_id=? AND answered=0",
            (message_id,)
        )
        
        if not question:
            return

        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(CONFIG['response_delay'] * 60)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        result = db_execute(
            "SELECT admin_replied FROM questions WHERE msg_id=?",
            (message_id,)
        )
        if result and result[0][0]:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        answer = get_answer(question[0][0])
        
        answer = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', answer)
        
        await bot.send_message(
            chat_id=chat_id,
            message_thread_id=topic_id,
            text=answer,
            reply_to_message_id=message_id,
            parse_mode="HTML",
            reply_markup=get_feedback_keyboard(message_id)

        )

        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
        db_execute(
            "UPDATE questions SET answered=1 WHERE msg_id=?",
            (message_id,),
            commit=True
        )
    except Exception as e:
        logger.error(f"Response error: {e}")

def db_execute(query: str, params=(), commit: bool = False):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        with closing(sqlite3.connect('questions.db')) as conn:
            conn.execute("PRAGMA foreign_keys = ON")
            c = conn.cursor()
            c.execute(query, params)
            if commit:
                conn.commit()
            return c.fetchall()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return None

async def check_user_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        result = db_execute(
            "SELECT question_count FROM users WHERE user_id=?",
            (user_id,)
        )
        return not (result and result[0][0] >= CONFIG['max_questions_per_user'])
    except Exception as e:
        logger.error(f"Limit check error: {e}")
        return True

def update_user_limit(user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        db_execute(
            '''INSERT OR REPLACE INTO users 
            (user_id, last_question_time, question_count)
            VALUES (?, ?, COALESCE(
                (SELECT question_count FROM users WHERE user_id=?) + 1, 1))''',
            (user_id, datetime.now(), user_id),
            commit=True
        )
    except Exception as e:
        logger.error(f"Limit update error: {e}")

def cleanup_database():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        db_execute(
            "DELETE FROM questions WHERE timestamp < ?",
            (datetime.now() - timedelta(days=7),),
            commit=True
        )
        logger.info("Database cleanup completed")
    except Exception as e:
        logger.error(f"Cleanup error: {e}")

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç –∏ —Ç–µ–º—É
        if message.chat.id != CONFIG['allowed_chat_id']:
            return
            
        topic_id = getattr(message, 'message_thread_id', 1)
        if topic_id != CONFIG['allowed_topic_id']:
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_to_message:
            if await is_admin(message.chat.id, message.from_user.id):
                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª
                db_execute(
                    "UPDATE questions SET admin_replied=1 WHERE msg_id=?",
                    (message.reply_to_message.message_id,),
                    commit=True
                )
                logger.info(f"Admin replied to message {message.reply_to_message.message_id}")
                return

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if message.from_user.is_bot:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å (–∑–Ω–∞–∫ "?")
        if '?' not in message.text:
            logger.info(f"Ignoring message without question mark: {message.text}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if not await check_user_limit(message.from_user.id):
            await message.reply(
                f"üö´ –õ–∏–º–∏—Ç ({CONFIG['max_questions_per_user']} –≤–æ–ø—Ä–æ—Å–æ–≤/—á–∞—Å) –∏—Å—á–µ—Ä–ø–∞–Ω!"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
        db_execute(
            '''INSERT INTO questions 
            (msg_id, chat_id, user_id, question, timestamp, topic_id)
            VALUES (?, ?, ?, ?, ?, ?)''',
            (
                message.message_id,
                message.chat.id,
                message.from_user.id,
                message.text,
                datetime.now(),
                topic_id
            ),
            commit=True
        )
        
        save_question_to_file(message.text) #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Ñ–∞–π–ª

        update_user_limit(message.from_user.id)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        asyncio.create_task(
            send_delayed_response(
                chat_id=message.chat.id,
                message_id=message.message_id,
                topic_id=topic_id
            )
        )

    except Exception as e:
        logger.error(f"Message handling error: {e}")

async def is_admin(chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        admins = await bot.get_chat_administrators(chat_id)
        return any(admin.user.id == user_id for admin in admins)
    except Exception as e:
        logger.error(f"Admin check error: {e}")
        return False


#–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ –æ—Ç–≤–µ—Ç
@dp.callback_query_handler(lambda c: c.data.startswith(('like:', 'dislike:')))
async def handle_feedback(callback_query: types.CallbackQuery):
    try:
        feedback_type, msg_id = callback_query.data.split(':')
        user_id = callback_query.from_user.id
        feedback_text = 'üëç' if feedback_type == 'like' else 'üëé'

        save_feedback_to_file(int(msg_id), feedback_text, user_id)

        await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!", show_alert=False)
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É.")



async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    scheduler.start()
    scheduler.add_job(
        cleanup_database,
        'interval',
        hours=CONFIG['cleanup_interval']
    )
    
    try:
        chat = await bot.get_chat(CONFIG['allowed_chat_id'])
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —á–∞—Ç–µ: {chat.title} (ID: {chat.id})")
        logger.info(f"–†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–º–µ —Å ID: {CONFIG['allowed_topic_id']}")
    except Exception as e:
        logger.error(f"Startup error: {e}")
        raise

if __name__ == "__main__":
    try:
        executor.start_polling(
            dp,
            skip_updates=True,
            on_startup=on_startup
        )
    except Exception as e:
        logger.error(f"Critical error: {e}")
    finally:
        scheduler.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
