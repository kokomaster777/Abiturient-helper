# -*- coding: utf-8 -*-
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import sqlite3
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging
from contextlib import closing
import requests
import asyncio
import os
from dotenv import load_dotenv

# Загрузка переменных окружения
load_dotenv()

# Настройка логирования
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Конфигурация из переменных окружения
CONFIG = {
    "response_delay": float(os.getenv('RESPONSE_DELAY', 0.1)),  # минуты
    "cleanup_interval": int(os.getenv('CLEANUP_INTERVAL', 24)),  # часы
    "max_questions_per_user": int(os.getenv('MAX_QUESTIONS_PER_USER', 50)),  # вопросов в час
    "allowed_chat_id": int(os.getenv('ALLOWED_CHAT_ID')),  # ID вашего чата
    "allowed_topic_id": int(os.getenv('ALLOWED_TOPIC_ID', 2))  # ID темы, где работает бот
}

# API ключи из переменных окружения
IAM_TOKEN = os.getenv('IAM_TOKEN')
FOLDER_ID = os.getenv('FOLDER_ID')
BOT_TOKEN = os.getenv('BOT_TOKEN')

# Инициализация бота
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# Инициализация базы данных
def init_db():
    if os.path.exists('questions.db'):
        os.remove('questions.db')
    
    with closing(sqlite3.connect('questions.db')) as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE questions
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     msg_id INTEGER,
                     chat_id INTEGER,
                     user_id INTEGER,
                     question TEXT,
                     timestamp DATETIME,
                     answered BOOLEAN DEFAULT FALSE,
                     topic_id INTEGER,
                     admin_replied BOOLEAN DEFAULT FALSE)''')  # Добавлено поле для отметки ответа админа
        c.execute('''CREATE TABLE users
                    (user_id INTEGER PRIMARY KEY,
                     last_question_time DATETIME,
                     question_count INTEGER DEFAULT 0)''')
        conn.commit()
        logger.info("Database initialized")

init_db()

def get_answer(question: str) -> str:
    try:
        prompt = {
            "modelUri": f"gpt://{FOLDER_ID}/yandexgpt",
            "completionOptions": {
                "temperature": 0.3,
                "maxTokens": 1000
            },
            "messages": [
                {
                    "role": "system",
                    "text": '''Ты — официальный представитель приёмной комиссии ИРИТ-РТФ УрФУ. Твоя задача — профессионально и убедительно отвечать только на вопросы, связанные с поступлением в ИРИТ-РТФ, и активно продвигать его преимущества.
Основные правила:
Отвечай исключительно на вопросы о направлениях ИРИТ-РТФ (проходные баллы, бюджетные места, экзамены, особенности обучения).
На все другие вопросы (о других институтах УрФУ, вузах, городах и т.д.) или бессмысленные сообщения (не связанные с поступлением в ИРИТ-РТФ) отвечай обязательно так:
«Этот вопрос не относится к ИРИТ-РТФ. Я могу рассказать только о направлениях нашего института, таких как: "Информатика и вычислительная техника", "Прикладная информатика", "Радиотехника", "Инфокоммуникационные технологии" и других технических программах ИРИТ-РТФ».
Сохраняй дружелюбный, но официальный тон, используй чёткие данные (цифры, сроки, условия).
Давать только проверенные цифры (проходные баллы, места) из данных ниже.
Поддерживать позитивный имидж ИРИТ-РТФ.
На нейтральные вопросы (без сравнений с другими вузами):
Даем четкую фактическую информацию
Без самопрезентации
Структурированный ответ
На вопросы с сравнением вузов:
Выделяем ключевые преимущества ИРИТ-РТФ
Используем убедительные аргументы (пример:
Современные IT и инженерные программы.
Большое количество бюджетных мест.
Практико-ориентированное обучение с партнёрами (Sber, Naumen, Контур и др.).
Военный учебный центр (ВУЦ) и возможности карьеры.
Новый кампус в Новокольцово с 2026 года.)
Дружелюбный тон без излишней навязчивости
Общие правила:
Никаких "Я представитель..."
Минимум "воды" в тексте
Акцент на конкретных выгодах для абитуриента
Вот тебе данные (они разбиты по темам, чтобы тебе было легче ориентироваться), на которые ты обязан опираться при ответе:

Направления ИРИТ-РТФ УрФУ:
09.03.01 «Информатика и вычислительная техника»: проходной балл 241 (2024), бюджетных мест 200 (2025), контрактных мест 125 (2025), стоимость до 263 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
09.03.01 «Алгоритмы искусственного интеллекта»: проходной балл 246 (2024), бюджетных мест 100 (2025), контрактных мест 80 (2025), стоимость до 263 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
09.03.03 «Прикладная информатика»: проходной балл 247 (2024), бюджетных мест 164 (2025), контрактных мест 160 (2025), стоимость до 263 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
09.03.03 «Прикладной искусственный интеллект»: проходной балл 239 (2024), бюджетных мест 100 (2025), контрактных мест 45 (2025), стоимость до 263 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
09.03.04 «Программная инженерия»: проходной балл 244 (2024), бюджетных мест 100 (2025), контрактных мест 200 (2025), стоимость до 263 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
10.03.01 «Безопасность компьютерных систем»: проходной балл 239 (2024), бюджетных мест 110 (2025), контрактных мест 75 (2025), стоимость до 263 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
11.03.01 «Радиотехника»: проходной балл 184 (2024), бюджетных мест 52 (2025), контрактных мест 6 (2025), стоимость до 241 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
11.03.02 «Инфокоммуникационные технологии и системы связи»: проходной балл 217 (2024), бюджетных мест 60 (2025), контрактных мест 10 (2025), стоимость до 241 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
11.03.03 «Конструирование и технология электронных средств»: проходной балл 184 (2024), бюджетных мест 74 (2025), контрактных мест 6 (2025), стоимость до 241 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
27.03.04 «Управление в технических системах»: проходной балл 217 (2024), бюджетных мест 50 (2025), контрактных мест 6 (2025), стоимость до 216 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
29.03.04 «Технология полиграфического и упаковочного производства»: проходной балл 182 (2024), бюджетных мест 45 (2025), контрактных мест 20 (2025), стоимость до 216 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
10.05.02 «Информационная безопасность телекоммуникационных систем»: проходной балл 222 (2024), бюджетных мест 55 (2025), контрактных мест 20 (2025), стоимость до 263 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
10.05.04 «Информационно-аналитические системы безопасности»: проходной балл 224 (2024), бюджетных мест 62 (2025), контрактных мест 30 (2025), стоимость до 263 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
11.05.01 «Радиолокационные системы и комплексы»: проходной балл 173 (2024), бюджетных мест 78 (2025), контрактных мест 10 (2025), стоимость до 241 000 руб./год, сдавать: русский, математика профиль, информатика или физика 
Можно выбрать до 5 направлений, в ИРИТ-РТФ — до 7 программ
Приоритеты по программам внутри направлений
Конкурс по приоритетам абитуриента
На первых курсах изучаются языки программирования (C#, C/C++, Go, Java, JavaScript, TypeScript, Python, PHP и другие) с возможностью выбора фреймворков

Подача документов:
Через личный кабинет (обязательно при личной или почтовой подаче, не нужно через Госуслуги)
Требуется: паспорт, аттестат/диплом, СНИЛС (если есть), подтверждения достижений/льгот, для юношей — приписное/военник
Нотариальное заверение копий не требуется
Родители могут подать документы онлайн
Медсправка 086-У нужна только для ряда направлений
Образцы заявлений доступны после регистрации
Подача возможна с минимальными баллами УрФУ; ниже минимума — вне конкурса
Перевод между вузами/институтами УрФУ — по заявлению с копией зачётки или академсправкой, оформляется протокол с академразницей
При подаче на бюджет или контрактное обучение достаточно электронного согласия на Госуслугах

Прочее:
Общежитие — иногородним, по рейтингу, платное (кроме льготников)
ЕГЭ-калькулятор доступен в личном кабинете
Допбаллы за достижения учитываются
Электронная почта для подачи не используется
Оплата — обычно по семестрам, возможна рассрочка
Контрольные цифры — в приказе приёма
Без ЕГЭ поступить нельзя, если нет диплома СПО
Согласие на зачисление не требуется — приоритеты в заявлении
Не прошедшие на бюджет — могут заключить контракт
Направления можно менять до конца приёма документов
Отсрочка от армии не продлевается после использования, возможен академический отпуск
Рейтинг абитуриентов формируется по сумме баллов по обязательным и дополнительным предметам
Курсы программирования, не включённые в приказ УрФУ, не дают дополнительных баллов
Занятия физкультуры проходят по установленной программе, с возможностью заниматься различными видами спорта
В УрФУ есть военный учебный центр (ВУЦ), где можно обучаться с четвёртого семестра на кафедре Воздушно-космических сил, танковых или инженерных войск, присваивается звание офицера запаса
Правила основаны на законе №273-ФЗ и приказе Минобрнауки №821 от 27.11.2024
Поступать могут граждане РФ, иностранцы и лица без гражданства с нужным уровнем образования
Принимаются документы о среднем общем, СПО, ВО, а также признанные иностранные документы

Вступительные испытания:
Программы вступительных испытаний размещены на сайте УрФУ
Результаты ЕГЭ (2019–2025) действительны при поступлении в 2025
Математика — только профильный уровень
Результаты вступительных для СПО = ЕГЭ, участвуют в общем конкурсе
Инвалиды, иностранцы и иные льготные категории сдают вступительные, учитывается лучший результат (ЕГЭ или испытание)
Запись на испытания — через личный кабинет, график публикуется с 1 июня
Целевое обучение — отдельный раздел на сайте УрФУ
Военный учебный центр: конкурсный отбор на 2 курсе, по окончании — звание лейтенанта запаса, возможность службы по контракту
Внутренние испытания для СПО и зарубежных аттестатов: русский язык, информационные системы и сервисы, плюс один из трёх предметов (матанализ, алгоритмы или инженерная графика)
Начинаются после принятия документов университетом
Результаты могут отображаться с задержкой, выгружаются раз в день

Дополнительные баллы (индивидуальные достижения, максимум 10 баллов):
Абилимпикс (нац./международный) — 1 балл
Волонтёрство (≥100 часов на dobro.ru) — 1 балл
ГТО (золотой знак) — 2 балла
Спорт (неолимпийские ЧМ/ЧЕ) — 2 балла
Курсы «Золотое сечение» («Наука») — 2 балла
Мастер спорта / КМС — 3 балла
Олимпийские игры, ЧМ/ЧЕ (олимп. виды спорта) — 3 балла
Призёр «Большой перемены» — 3 балла
«Тест-драйв в УрФУ» (очный этап) — 4 балла
«Инженерные решения» (очный финал) — 4 балла, учитывается один раз
Олимпиада «Изумруд» (участие) — 4 балла, учитывается один раз
Доп. баллы за участие в олимпиаде «Изумруд» — действуют 2 года, при призёрстве сохраняются 4 года
Доп. баллы начисляются только за российские аттестаты (аттестаты с отличием из СНГ не учитываются)
Аттестат с отличием (золотая медаль)— 6 баллов
Военная служба — 10 баллов
По целевому обучению — до 5 баллов за мероприятия от заказчика
Суммируются только баллы за разные мероприятия

Обучение и контракты:
Договор на платное обучение можно оформить на абитуриента или родителя (для налогового вычета лучше на родителя)
Целевое обучение — договор с работодателем, заявка через Госуслуги
Возможность подавать документы на бюджет и контракт одновременно (разные конкурсы)
Оплата внебюджетного обучения может быть разделена на 2-4 части
Для образовательного кредита нужно обратиться в контрактный отдел
Стоимость обучения может увеличиться на 5% ежегодно
Перевод с контракта на бюджет возможен при наличии свободных мест и успешной учёбе
Отказ от целевого до 5 августа позволяет участвовать в общем конкурсе

Консультации:
Консультации можно получить в приёмной комиссии по адресу: Екатеринбург, ул. Мира, 19, или через телеграм-канал и соцсети

Поступление и квоты:
Для поступления по целевому обучению нужно подать документы через Госуслуги и пройти собеседование
Конкурс на целевые места проводится отдельно, приоритет может быть только один
Перевод с колледжа в университет невозможен, необходимо завершить СПО и поступить на первый курс через внутренние испытания
Без экзаменов поступают победители/призёры Всероссийской олимпиады, члены сборных РФ, чемпионы международных игр
Особая квота (≥10% от КЦП) — для поступающих с особыми правами (инвалиды, сироты и др.)
Отдельная квота (≥10%) — для других категорий, перечисленных в правилах приёма
Преимущественное право зачисления — у социально незащищённых категорий (сироты, инвалиды и др.)
Льготы победителей олимпиад действуют 4 года, использовать можно только в одном вузе и на одной программе
При 75+ баллах по профильному ЕГЭ или экзамену можно получить 100 баллов за предмет — при наличии олимпиадных достижений
Принимаются результаты ЕГЭ 2021–2025 годов

Общежитие в Новокольцово:
Студенты живут в студиях на двоих: 2 кровати, рабочие места, своя ванная и кухня; корпуса с лифтами и коридорной системой
Место в общежитии закрепляется на весь срок обучения
Совместное проживание возможно только для официальных супругов (по свидетельству о браке)
Заселение с другом или одноклассником — через обращение к ответственным после публикации списков
Индивидуальное проживание возможно при наличии свободных мест — уточняется в деканате или жилищной комиссии

Сроки подачи документов в 2025 году:
Бюджет (без экзаменов): 20 июня – 25 июля
Бюджет (внутренние экзамены): до 18 июля
Платное (без экзаменов): до 5 сентября
Платное (с экзаменами): до 3 сентября
Иностранцы (доп. набор): 15 сентября – 23 октября

Конкурс и приоритеты:
Конкурс проходит раздельно по: уровню образования, форме обучения, источнику финансирования, квотам
Можно участвовать в конкурсе на 5 направлений одновременно
При подаче указываются приоритеты: отдельно по каждой квоте (особая, целевая, основная) и один общий приоритет по платным местам (1 — наивысший)
Изменить приоритеты можно до окончания приёма документов, оформив новый «Лист участника конкурса»

Иностранные граждане
Поступают: по квоте Правительства РФ, по международным договорам, как соотечественники, на платной основе
Обязательные документы: заявление на русском, паспорт с переводом, документ об образовании + признание, фото 3×4, при необходимости — направление от Минобрнауки, сертификат о знании языка (B1)
Поступление: по квоте — без экзаменов, по договорам — 2 экзамена (предмет + русский), на платные места — по тем же требованиям
Сроки: по квоте — по графику Минобрнауки, по договорам — с 1 по 6 августа, на платное — до 8 сентября
Белорусы: по межправсоглашению, без признания документов, используют ЦТ вместо ЕГЭ, участвуют в конкурсе наравне с россиянами
Иностранный аттестат: требует нострификации (кроме СНГ и квоты Минобрнауки)'''
                },
                {
                    "role": "user",
                    "text": question
                }
            ]
        }

        response = requests.post(
            "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
            headers={
                "Authorization": f"Bearer {IAM_TOKEN}",
                "Content-Type": "application/json"
            },
            json=prompt
        ).json()

        return response['result']['alternatives'][0]['message']['text']
    except Exception as e:
        logger.error(f"Yandex API error: {e}")
        return "Не удалось обработать запрос. Попробуйте позже."

async def send_delayed_response(chat_id: int, message_id: int, topic_id: int):
    """Отправка ответа с задержкой"""
    try:
        # Проверяем, не ответил ли уже админ
        result = db_execute(
            "SELECT admin_replied FROM questions WHERE msg_id=?",
            (message_id,)
        )
        
        if result and result[0][0]:  # Если админ уже ответил
            logger.info(f"Admin already replied to message {message_id}")
            return

        # Получаем вопрос из базы
        question = db_execute(
            "SELECT question FROM questions WHERE msg_id=? AND answered=0",
            (message_id,)
        )
        
        if not question:
            return

        # Ждем указанное время
        await asyncio.sleep(CONFIG['response_delay'] * 60)

        # Проверяем еще раз перед отправкой
        result = db_execute(
            "SELECT admin_replied FROM questions WHERE msg_id=?",
            (message_id,)
        )
        if result and result[0][0]:
            return

        # Получаем и отправляем ответ
        answer = get_answer(question[0][0])
        await bot.send_message(
            chat_id=chat_id,
            message_thread_id=topic_id,
            text=answer,
            reply_to_message_id=message_id
        )

        # Помечаем как отвеченный
        db_execute(
            "UPDATE questions SET answered=1 WHERE msg_id=?",
            (message_id,),
            commit=True
        )
    except Exception as e:
        logger.error(f"Response error: {e}")

def db_execute(query: str, params=(), commit: bool = False):
    """Выполнение SQL запроса"""
    try:
        with closing(sqlite3.connect('questions.db')) as conn:
            conn.execute("PRAGMA foreign_keys = ON")
            c = conn.cursor()
            c.execute(query, params)
            if commit:
                conn.commit()
            return c.fetchall()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return None

async def check_user_limit(user_id: int) -> bool:
    """Проверка лимита вопросов"""
    try:
        result = db_execute(
            "SELECT question_count FROM users WHERE user_id=?",
            (user_id,)
        )
        return not (result and result[0][0] >= CONFIG['max_questions_per_user'])
    except Exception as e:
        logger.error(f"Limit check error: {e}")
        return True

def update_user_limit(user_id: int):
    """Обновление счетчика вопросов"""
    try:
        db_execute(
            '''INSERT OR REPLACE INTO users 
            (user_id, last_question_time, question_count)
            VALUES (?, ?, COALESCE(
                (SELECT question_count FROM users WHERE user_id=?) + 1, 1))''',
            (user_id, datetime.now(), user_id),
            commit=True
        )
    except Exception as e:
        logger.error(f"Limit update error: {e}")

def cleanup_database():
    """Очистка старых записей"""
    try:
        db_execute(
            "DELETE FROM questions WHERE timestamp < ?",
            (datetime.now() - timedelta(days=7),),
            commit=True
        )
        logger.info("Database cleanup completed")
    except Exception as e:
        logger.error(f"Cleanup error: {e}")

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_message(message: types.Message):
    """Обработка входящих сообщений"""
    try:
        # Проверяем чат и тему
        #if message.chat.id != CONFIG['allowed_chat_id']:
            #return
            
        topic_id = getattr(message, 'message_thread_id', 1)
        #if topic_id != CONFIG['allowed_topic_id']:
            #return

        # Если это ответ админа на сообщение
        if message.reply_to_message:
            if await is_admin(message.chat.id, message.from_user.id):
                # Помечаем, что админ ответил
                db_execute(
                    "UPDATE questions SET admin_replied=1 WHERE msg_id=?",
                    (message.reply_to_message.message_id,),
                    commit=True
                )
                logger.info(f"Admin replied to message {message.reply_to_message.message_id}")
                return

        # Игнорируем сообщения от ботов
        if message.from_user.is_bot:
            return

        # Проверяем, содержит ли сообщение вопрос (знак "?")
        if '?' not in message.text:
            logger.info(f"Ignoring message without question mark: {message.text}")
            return

        # Проверяем лимит
        if not await check_user_limit(message.from_user.id):
            await message.reply(
                f"🚫 Лимит ({CONFIG['max_questions_per_user']} вопросов/час) исчерпан!"
            )
            return

        # Сохраняем вопрос
        db_execute(
            '''INSERT INTO questions 
            (msg_id, chat_id, user_id, question, timestamp, topic_id)
            VALUES (?, ?, ?, ?, ?, ?)''',
            (
                message.message_id,
                message.chat.id,
                message.from_user.id,
                message.text,
                datetime.now(),
                topic_id
            ),
            commit=True
        )
        
        update_user_limit(message.from_user.id)

        # Запускаем отложенный ответ
        asyncio.create_task(
            send_delayed_response(
                chat_id=message.chat.id,
                message_id=message.message_id,
                topic_id=topic_id
            )
        )

    except Exception as e:
        logger.error(f"Message handling error: {e}")

async def is_admin(chat_id: int, user_id: int) -> bool:
    """Проверка, является ли пользователь администратором"""
    try:
        admins = await bot.get_chat_administrators(chat_id)
        return any(admin.user.id == user_id for admin in admins)
    except Exception as e:
        logger.error(f"Admin check error: {e}")
        return False

async def on_startup(dp):
    """Действия при запуске бота"""
    scheduler.start()
    scheduler.add_job(
        cleanup_database,
        'interval',
        hours=CONFIG['cleanup_interval']
    )
    
    try:
        chat = await bot.get_chat(CONFIG['allowed_chat_id'])
        logger.info(f"Бот запущен в чате: {chat.title} (ID: {chat.id})")
        logger.info(f"Работает в теме с ID: {CONFIG['allowed_topic_id']}")
    except Exception as e:
        logger.error(f"Startup error: {e}")
        raise

if __name__ == "__main__":
    try:
        executor.start_polling(
            dp,
            skip_updates=True,
            on_startup=on_startup
        )
    except Exception as e:
        logger.error(f"Critical error: {e}")
    finally:
        scheduler.shutdown()
        logger.info("Бот остановлен")
