from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
import sqlite3
import csv
import os
from contextlib import closing
from dotenv import load_dotenv
import logging
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN")

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = []  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
admin_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
admin_keyboard.add(
    KeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ü–µ–Ω–∫–∏"),
    KeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
)

# –ü—É—Ç—å –∫ –±–∞–∑–∞–º –∏ CSV-—Ñ–∞–π–ª–∞–º
FEEDBACK_DB = "feedback_log.db"
QUESTIONS_DB = "questions_log.db"
FEEDBACK_CSV = "feedback_history.csv"
QUESTIONS_CSV = "questions_history.csv"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def merge_with_existing_csv(db_path: str, csv_path: str, headers: list, query: str):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º CSV-—Ñ–∞–π–ª–æ–º"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
        existing_data = []
        if os.path.exists(csv_path):
            with open(csv_path, "r", encoding="utf-8-sig") as f:
                reader = csv.DictReader(f, delimiter=";")
                existing_data = [row for row in reader]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        with closing(sqlite3.connect(db_path)) as conn:
            cursor = conn.execute(query)
            new_data = cursor.fetchall()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        merged_data = existing_data + [
            dict(zip(headers, row)) for row in new_data
        ]

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        seen_ids = set()
        unique_data = []
        for row in merged_data:
            if row["id"] not in seen_ids:
                seen_ids.add(row["id"])
                unique_data.append(row)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö)
        if "timestamp" in headers:
            unique_data.sort(key=lambda x: x["timestamp"], reverse=True)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ CSV
        with open(csv_path, "w", encoding="utf-8-sig", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=headers, delimiter=";")
            writer.writeheader()
            writer.writerows(unique_data)

        return csv_path
    except Exception as e:
        logging.error(f"Error merging CSV: {e}")
        raise

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!", reply_markup=admin_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(lambda message: message.text == "üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ü–µ–Ω–∫–∏")
async def send_feedback_csv(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        csv_path = merge_with_existing_csv(
            db_path=FEEDBACK_DB,
            csv_path=FEEDBACK_CSV,
            headers=["id", "message_id", "question_text", "bot_answer", "feedback", "user_id", "timestamp"],
            query="SELECT id, message_id, question_text, bot_answer, feedback, user_id, timestamp FROM feedbacks"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(types.InputFile(csv_path))
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ feedbacks: {e}")

@dp.message_handler(lambda message: message.text == "üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
async def send_questions_csv(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        csv_path = merge_with_existing_csv(
            db_path=QUESTIONS_DB,
            csv_path=QUESTIONS_CSV,
            headers=["id", "question", "timestamp"],
            query="SELECT id, question, timestamp FROM questions_log"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(types.InputFile(csv_path))
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ questions: {e}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º CSV-—Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(FEEDBACK_CSV):
        with open(FEEDBACK_CSV, "w", encoding="utf-8-sig", newline="") as f:
            writer = csv.writer(f, delimiter=";")
            writer.writerow(["id", "message_id", "question_text", "bot_answer", "feedback", "user_id", "timestamp"])

    if not os.path.exists(QUESTIONS_CSV):
        with open(QUESTIONS_CSV, "w", encoding="utf-8-sig", newline="") as f:
            writer = csv.writer(f, delimiter=";")
            writer.writerow(["id", "question", "timestamp"])

    executor.start_polling(dp, skip_updates=True)
